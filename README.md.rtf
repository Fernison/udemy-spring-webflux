{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red217\green232\blue247;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgenericrgb\c85098\c90980\c96863;\csgray\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww25100\viewh14280\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 # SPRING WEBFLUX\
\
##Entorno:\
- Spring Tools IDE (https://spring.io/tools)\
- Usamos Spring Developer Tools\
- Los proyectos los creamos con Spring Starter Project y a\'f1adiendo las dependencias\
	-	Para a\'f1adir otra dependencia se puede hacer desde el propio Eclipse en las opciones del proyecto, Spring -> Add starter\
- Se pueden arrancar m\'e1s instancias d los Ms desde Eclipse directamente. Ir a Run As -> Run Configuration y en \'93Arguments\'94, a\'f1adir \'93-Dserver.port=8081\'94 con un puerto distinto cada vez. Es importante eliminarlo despu\'e9s de usarlo si no se queda en memoria y siempre se arranca con ese puerto \
\
## Reactive\
- Maneja streams de maneja asincrona\
- Subject (Observable) es el publisher. Notifica los cambios a los Subscriptor (Observer)\
- Dos tipos de Observables (Flux -> 0 a n. Mono -> 0)\
- reactive-streams.org -> Especificacion \
- Imlpementaciones de esta especificaci\'f3n: reactiveX, projectReactor (la que usa Spring)\
- Por defecto, las integraciones con SQL normal no tiene soporte reactivo. Habr\'eda que integrarse normalmente y convertirlo a reactivo. \
\
- Si se trabaja con BBDD es recomendable que tengan soporte reactive, como Mongo\
- Un interfaz puede heredar (extends) de otro interfaz\
\
## Spring\
- Spring MVC es bloquearte y sincrona. COnstruido sobre el API Servlet de toda la vida.\
- Spring Web Flux es no bloquearte y admite contrapresi\'f3n.\
	- Se debe ejecutar en servidores que admitan peticiones reactivas (Betty, Undertow, Tomcat (Contenedor Servlet 3.1+))\
	- Se integra con vistas Thymeleaf que act\'faa como Observer\
	- Se integra tambi\'e9n con Mongo de forma reactiva.\
- Para la generaci\'f3n de HTML usamos el plugin \'93Emmet\'94 que nos permite a trav\'e9s de comandos crear estructura html. Por ejemplo: escribimos \'93\cf2 table(\ul thead\ulnone >\ul tr\ulnone >\ul th\ulnone *4+\ul tbody\ulnone >\ul tr\ulnone >\ul td\ulnone *4\'94) y le damos a Tab para que genere una tabla\cf0 \
- Crear un formulario con Emmet: \cf2 form(\ul div\ulnone >label+\ul div\ulnone >input)*4\cf0 \
\
## Mongo\
- Una tabla es una colecci\'f3n\
- Las colecciones tienen documentos (filas en SQL)\
- No tiene integridad referencial \
- \'93
\f1\fs22 \cf3 \CocoaLigature0 docker run -d -p 27017:27017 -v ~/dataMongo:/data/db mongo\'94\
- Guarda los datos en BSON (Binary JSON)
\f0\fs24 \cf0 \CocoaLigature1 \
- En Spring, si no se indican datos de conexi\'f3n, por defecto se conecta a localhost:27017 en la BBDD \'93test\'94\
- SpringDataMongoReactive puede utilizar dos implementaciones reactivas: Rx o ProjectReactor. Nosotros usamos ProjectReactor.\
\
## Thymeleaf\
\
- Los helpers van precedido de \'93#\'94\
\
## Tests\
\
- Para ejecutar los tests usando macen: 
\f1\fs22 \cf3 \CocoaLigature0 ./mvnw test
\f0\fs24 \cf0 \CocoaLigature1 \
\
- \'93mvnw\'94 se crea al crear el proyecto Spring Starter Project\
\
## Eureka\
\
- Con las versiones de Spring y Spring Cloud que vienen al crear el proyecto con Spring Starter no arranca bien. Tampoco pilla el puerto que se le personaliza en Application.properties.\
- Para que funcione, usar las versiones del pom.xml del proyecto.}